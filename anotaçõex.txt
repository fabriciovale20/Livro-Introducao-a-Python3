→ Estrutura do FOR:
    for "contador" in range("início", "fim", "saltos"):
Exemplo:
    for c in range(1, 10, 2):
        print(c)

Irá mostrar: 1, 3, 5, 7 e 9.
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Comando "break" também interrompe o laço FOR.
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Também pode utilizar o ELSE no FOR:
L = [7, 9, 10, 12]
p = int(input('Digite um número a pesquisar: '))

for e in L:
    if e == p:
        print('Elemento encontrado!')
        break
else:
    print('Elemento não encontrado.')

    Nesse caso, se o FOR percorrer toda lista sem ser interrompido, ele executará o ELSE no final.
    OBS.: O mesmo serve para o WHILE, também pode-se aplicar o ELSE no WHILE.
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Criar uma cópia de uma lista, exemplo: 
    lista = []
    lista_2 = lista[:]
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Adicionar elementos numa lista:
    L = L + [1] é a mesma coisa que L.append(1)
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Adicionar uma lista na outra usando EXTEND:
    L = ['a', 'b']
    L.extend(['c'])
    L = ['a', 'b', 'c']

    L = ['a', 'b', 'c']
    L.extend(['d', 'e'])
    L = ['a', 'b', 'c', ['d', 'e']]
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Usando listas como Fila, recebe o conceito: O último elemento a entrar é o último a sair.
Funciona como uma fila de banco, o primeiro a chegar é o primeiro a ser atendido.
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Usando lista como Pilha, recebe o conceito: O último elemento a entrar é o primeiro a sair.
Funciona como uma pulha de pratos, o último prato a ser colocado na pilha dos pratos é o primeiro a ser lavado.
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Gerar um lista com 10 elementos:
    lista = list(range(1, 11)) # Vai de 1 até 10
    lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
----------------------------------------------------------------------------------------------------------------------------------------------------
→ O parâmentro RANGE do FOR e da LISTA, funcionam da mesma forma.
Exemplo:
    Lista >>> L = list(range(100, 1100, 50)) # 100 é o início, 1100 o fim e 50 os saltos.
    For >>> for c in range(100, 1100, 50): # O RANGE fará os mesmos passos da Lista.
----------------------------------------------------------------------------------------------------------------------------------------------------
→ ENUMERATE puxa em ordem o índice e o valor, gerando uma tupla.
Exemplo:
L = [5, 9, 13]
for x, e in enumerate(L): # Onde "x" é o índice e "e" o valor.
    print(f'[{x}] {e}') # No primeiro resultado ele gera uma tupla (0, 5), em que x = 0 e e = 5. Então teremos "x, e = (0, 5)".

Resultado:
[0] 5
[1] 9
[2] 13
----------------------------------------------------------------------------------------------------------------------------------------------------
→ No DICIONÁRIO podemos mostrar apenas as Chaves (keys) ou Valores (values):
tabela = {
    'Alface': 0.45,
    'Batata': 1.20,
    'Tomate': 1,
    'Feijão': 1.50
}

print(tabela.keys()) # Irá imprimir apenas chaves
Resultado:
dict_keys(['Alface', 'Batata', 'Tomate', 'Feijão'])

print(tabela.values()) # Imprimi os valores
Resultado:
dict_values([0.45, 1.2, 1, 1.5])
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Podemos criar uma tupla de várias maneiras:
tupla = (1, 2, 3) ou tupla = 1, 2, 3

Podemos transformar lista em tupla:
L = [1, 2, 3]
T = tuple(L)
print(T)
Resultado:
(1, 2, 3)
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Descompactar valores e atribuir valores
a, b = 1, 2     # a vai ser 1 e b vai ser 2

Utilizamos * para informar que serão vários valores, criando uma lista:
*a, b = 1, 2, 3     # a recebe os primeiros valores inseridos que é 1 e 2 e b recebe o último
print(a)
print(b)

Resultado:
[1, 2]
3

Se fizemos para *b será da mesma forma:
a, *b = 1, 2, 3     # a recebe o primeiro valor inserido que é 1 e b recebe o restante
print(a)
print(b)

Resultado:
1
[2, 3]
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Conjunto (Set) é semelhante ao da matemática, parecido com uma lista porém não permite repetir valores dentro,
não mantem ordem dos elementos e usam {} semelhante ao dicionário:
a = set()

a.add(1)
a.add('a')
a.add(3)

print(a)
Resultado:
{1, 3, 'a'}

a.add('a')
a.add(4)

print(a)
Resultado:
{1, 3, 'a', 4}
>>>>>>>>>>>>>>>
Outro exemplo:
a = {0, 1, 2, 3, -1}
b = {2, 3}
c = set([4, 5, 6])

print(a | b)        # Utilizando | realiza a união entre os dois conjuntos
Resultado:
{0, 1, 2, 3, -1}

print(a | c)
Resultado:
{0, 1, 2, 3, 4, 5, 6, -1}

print(a - b)        # Utilizando - vai subtrair os elementos de b que tem que em a.
Resultado:
{0, 1, -1}

print(b - a)        # Nesse caso, não sobrou nenhum valor.
Resultado:
set()
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Transformar uma string em lista:
nome = list('Fabrício Vale')

→ Para fazer o inverso, utilizamos o JOIN
s = ''.join(nome)
print(s)
Resultado:
Fabrício Vale
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Para identificarmos se uma String começa (startswith) ou termina (endswith) com alguns caracteres específios:
nome = 'Fabrício Vale'
print(nome.startswith('Fabrício'))
Resultado:
True

print(nome.startswith('fabrício'))
Resultado:
False

print(nome.endswith('Vale'))
Resultado:
True
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Uma forma simples de verificar se uma palavra pertence a uma String:
nome = 'Fabrício Vale'
print('Fabrício' in nome)
Resultado:
True

print('Vale' not in nome)
Resultado:
False
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Pequisando dentro da String com find:
s = 'Um tigre, dois tigres, três tigres'
s.find('tigres')
15

s.rfind('tigres')  # r corresponde a iniciar a pesquisa pela direita
20

s.find('tigres', 7)  # 7 corresponde por onde começar a pesquisar, a partir da 7º posição

s.find('tigres', 0, 10)  # 0 início e 10 fim
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Pode substituir alguns caracteres numa string utilizando o REPLACE replace(a, b, c)
a = Esse primeiro parâmetro é o que você quer substituir
b = O segundo é pelo que você quer substituir
c = O último é quantas vezes você quer que ele substituia

Exemplo:
s = 'um tigre, dois tigres, três tigres'
s.replace('tigre', 'gato')
Resultado:
'um gato, dois gatos, três gatos

s.replace('tigre', 'gato', 1)       # Só irá substituir uma vez, por ter o terceiro parâmentro como 1
'um gato, dois tigres, três tigres'
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Para remover alguns caracteres ou espaços, podemos utilizar o strip() e para caracteres, por exemplo strip(','), irá remover todas as vírgulas
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Tabela de alguns formatos
b - Binário  # Exemplo print(f'{5678:b}') >>> Resultado: 1011000101110
c - Caractere
d - Base 10
n - Base 10 local
o - Octal
x - Hexadecimal com letras minúsculas
X - Hexadecimal com letras maiúculasicas
e - Notação científica com e minúsculo
E - Notação científica com e maiúculasica
f - Decimal
g - Genérico
G- Genérico
n - local
% - Percentual
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Exemplos de List Comprehensions
>>> L = [x for x in range(10)]
>>> L
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> Z = [x * 2 for x in [0, 1, 2, 3]]
>>> Z
[0, 2, 4, 6]

>>> Y = [(x, x * 2) for x in [1, 2, 3]]
>>> Y
[(1, 2), (2, 4), (3, 6)]

>>> Z = [s.upper() for s in 'abcdef']
>>> Z
['A', 'B', 'C', 'D', 'E', 'F']

FOR + IF
>>> P = [x for x in range(10) if x % 2 == 0] ou P = [x for x in range(0, 10, 2)] ou P = list(range(0, 10, 2))
>>> P
[0, 2, 4, 6, 8]

>>> D = [(y, x) for x, y in [(4, 3), (1, 2), (8, 9)]]
>>> D
[(3, 4), (2, 1), (9,8)]

>>> G = [(x, y) for *x, y in [(4, 2, 3), (5, 1, 2), (7, 8, 9)]]
>>> G
[([4, 2], 3), ([5, 1], 2), ([7, 8], 9)]

>>> J = [(x, y) for x, *y in [(4, 2, 3), (5, 1, 2), (7, 8, 9)]]
>>> J
[(4, [2, 3]), (5, [1, 2]), (7, [8, 9])]
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Exemplo de um gerador
>>> def gerador_fibonacci():
        p = 0
        s = 1

        while s < 10:
            yield s      # yield é como se fosse um return que suspende a execuçãoda função e retorna o valor, mas ele guarda o valor até onde parou
            p, s = s, s + p

>>> [x for x in gerador_fibonacci()]            
[1, 1, 2, 3, 5, 8]

GERADOR + LIST COMPREHENSIONS
>>> [x for x in range(10) if x % 3 == 0]
[0, 3, 6, 9]

Transformando para Gerador
>>> (x for in range(10) if x % 3 == 0)
>>> for y in (x for x in range(10) if x % 3 == 0):
        print(y)
0
3
6
9
----------------------------------------------------------------------------------------------------------------------------------------------------
→ Criando diretórios através do Python

import os
os.mkdir('pasta')
>>> pasta1

os.makdeirs('pasta1/pasta2/pasta3')
>>> pasta1
        pasta2
            pasta3

→ Alterando nome do diretório

import os

os.mkdir('velho')
os.rename('velho', 'novo')
>>> novo

→ Apagar diretório
import os

os.mkdir('vago')
os.rmdir('vago')
>>> ''

→ Listar todos os arquivos
import os

print(os.list(pasta1))
>>> pasta2